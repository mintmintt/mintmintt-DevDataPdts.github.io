test.data2 <- test.data[, sapply(test.data, is.numeric)]
dim(train.data2)
dim(test.data2
inTrain <- createDataPartition(y=train.data2$classe, p= 0.70, list=FALSE)
train.data3 <- train.data2[inTrain, ]
test.data3 <- train.data2[-inTrain, ]
dim(train.data3)
dim(test.data3)
classe <- train.data$classe
# delete unnecessary training data, create new set training data
train.delete <- grepl("^X|timestamp|window", names(train.data))
train.data <- train.data[, !train.delete]
train.data2 <- train.data[, sapply(train.data, is.numeric)]
train.data2$classe <- classe
## delete unnecessary test data, create new set test data
test.delete <- grepl("^X|timestamp|window", names(test.data))
test.data <- test.data[, !test.delete]
test.data2 <- test.data[, sapply(test.data, is.numeric)]
dim(train.data2)
dim(test.data2)
inTrain <- createDataPartition(y=train.data2$classe, p= 0.70, list=FALSE)
train.data3 <- train.data2[inTrain, ]
test.data3 <- train.data2[-inTrain, ]
dim(train.data3)
dim(test.data3)
set.seed(234)
modelRf <- train(classe ~ ., data=train.data3, method ="rf",importance = TRUE, trControl=trainControl(method = "cv", number = 5))
classe <- train.data$classe
# delete unnecessary training data, create new set training data
train.delete <- <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
train.data <- train.data[, !train.delete]
train.data2 <- train.data[, sapply(train.data, is.numeric)]
train.data2$classe <- classe
## delete unnecessary test data, create new set test data
test.delete <- test.delete <- <- c("X", "problem_id","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
test.data <- test.data[, !test.delete]
test.data2 <- test.data[, sapply(test.data, is.numeric)]
dim(train.data2)
dim(test.data2)
inTrain <- createDataPartition(y=train.data2$classe, p= 0.70, list=FALSE)
train.data3 <- train.data2[inTrain, ]
test.data3 <- train.data2[-inTrain, ]
dim(train.data3)
dim(test.data3)
set.seed(234)
modelRf <- train(classe ~ ., data=train.data3, method ="rf",importance = TRUE, trControl=trainControl(method = "cv", number = 5))
train.delete <- <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
train.data <- setdiff(names(training.data), train.delete)
train.data2 <- train.data2[, train.data]
classe <- train.data$classe
# delete unnecessary training data, create new set training data
train.delete <- <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
train.data <- setdiff(names(training.data), train.delete))
train.data2 <- train.data2[, train.data]
classe <- train.data$classe
# delete unnecessary training data, create new set training data
train.delete <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
train.data <- setdiff(names(training.data), train.delete))
train.data2 <- train.data2[, train.data]
classe <- train.data$classe
# delete unnecessary training data, create new set training data
train.delete <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
train.data <- setdiff(names(training.data), train.delete)
train.data2 <- train.data2(, train.data)
classe <- train.data$classe
# delete unnecessary training data, create new set training data
train.delete <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
train.data <- setdiff(names(train.data), train.delete)
train.data2 <- train.data2(, train.data)
classe <- train.data$classe
# delete unnecessary training data, create new set training data
train.delete <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
train.data <- setdiff(names(train.data), train.delete)
train.data2 <- train.data(, train.data)
train.data <- train.data[, colSums(is.na(train.data)) == 0]
test.data <- test.data[, colSums(is.na(test.data)) == 0]
classe <- train.data$classe
# delete unnecessary training data, create new set training data
train.delete <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
train.data <- setdiff(names(train.data), train.delete)
train.data2 <- train.data(, train.data)
train.data <- train.data[, colSums(is.na(train.data)) == 0]
test.data <- test.data[, colSums(is.na(test.data)) == 0]
classe <- train.data$classe
# delete unnecessary training data, create new set training data
train.delete <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
train.data <- setdiff(names(train.data), train.delete)
train.data2 <- train.data(, train.data)
train.data <- train.data[, colSums(is.na(train.data)) == 0]
train.data <- read.csv("./data/pml-training.csv", row.names=1, na.strings = " ")
test.data <- read.csv("./data/pml-testing.csv", row.names=1,  na.strings = "NA")
dim(train.data)
dim(test.data)
train.data <- train.data[, colSums(is.na(train.data)) == 0]
test.data <- test.data[, colSums(is.na(test.data)) == 0]
classe <- train.data$classe
# delete unnecessary training data, create new set training data
train.delete <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
train.data <- setdiff(names(train.data), train.delete)
train.data2 <- train.data(, train.data)
classe <- train.data$classe
# delete unnecessary training data, create new set training data
train.delete <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
train.data2 <- train.data[, !(names(train.data) %in% train.delete)]
## delete unnecessary test data, create new set test data
test.delete <- test.delete <- <- c("X", "problem_id","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
test.data <- test.data[[, !(names(train.data) %in% test.delete)]
test.data2 <- test.data[, sapply(test.data, is.numeric)]
dim(train.data2)
dim(test.data2)
classe <- train.data$classe
# delete unnecessary training data, create new set training data
train.delete <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
train.data2 <- train.data[, !(names(train.data) %in% train.delete)]
## delete unnecessary test data, create new set test data
test.delete <- c("X", "problem_id","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
test.data <- test.data[, !(names(train.data) %in% test.delete)]
test.data2 <- test.data[, sapply(test.data, is.numeric)]
dim(train.data2)
dim(test.data2)
classe <- train.data$classe
# delete unnecessary training data, create new set training data
train.delete <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
train.data2 <- train.data[, !(names(train.data) %in% train.delete)]
## delete unnecessary test data, create new set test data
test.delete <- c("X", "problem_id","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
test.data2 <- test.data[, !(names(train.data) %in% test.delete)]
dim(train.data2)
dim(test.data2)
classe <- train.data$classe
# delete unnecessary training data, create new set training data
train.delete <- c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
train.data2 <- train.data[, !(names(train.data) %in% train.delete)]
## delete unnecessary test data, create new set test data
test.delete <- c("X", "problem_id","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
test.data2 <- test.data[, !(names(test.data) %in% test.delete)]
dim(train.data2)
dim(test.data2)
inTrain <- createDataPartition(y=train.data2$classe, p= 0.70, list=FALSE)
train.data3 <- train.data2[inTrain, ]
test.data3 <- train.data2[-inTrain, ]
dim(train.data3)
dim(test.data3)
set.seed(234)
modelRf <- train(classe ~ ., data=train.data3, method ="rf",importance = TRUE, trControl=trainControl(method = "cv", number = 5))
modelRf
predict.Rf <- predict(modelRf, test.data3)
confusionMatrix(predict.Rf, test.data3$classe)
out.error <- 1 - as.numeric(confusionMatrix(test.data3$classe, predict.Rf)$overall[1])
out.error
data.final <- predict(modelRf, test.data2[, -length(names(test.data2))])
data.final
set.seed(234)
fit.Rf <- train(classe ~ ., data=train.data3, method ="rf",importance = TRUE, trControl=trainControl(method = "cv", number = 5))
modelRf
source('~/.active-rstudio-document', echo=TRUE)
---
source('~/.active-rstudio-document', echo=TRUE)
library(caret)
library(randomForest)
library(Hmisc)
library(doParallel)
library(rpart)
library(rpart.plot)
library(corrplot)
library(ggplot2)
library(lattice)
library(knitr)
Url1 <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
Url2 <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
train <- "./data/pml-training.csv"
test  <- "./data/pml-testing.csv"
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists(train)) {
download.file(Url1, destfile=train, method="curl")
}
if (!file.exists(test)) {
download.file(Url2, destfile=test, method="curl")
}
train.data <- read.csv("./data/pml-training.csv", row.names=1, na.strings = " ")
test.data <- read.csv("./data/pml-testing.csv", row.names=1,  na.strings = "NA")
dim(train.data)
dim(test.data)
sum(complete.cases(train.data))
train.data <- train.data[, colSums(is.na(train.data)) == 0]
test.data <- test.data[, colSums(is.na(test.data)) == 0]
classe <- train.data$classe
# delete unnecessary training data, create new set training data
train.delete <- c("raw_timestamp.part_1", "raw_timestamp_part_2", "user_name", "cvtd_timestamp", "new_window", "num_window")
train.data2 <- train.data[, !(names(train.data) %in% train.delete)]
train.data2$classe <- classe
## delete unnecessary test data, create new set test data
test.delete <- c("problem_id", "raw_timestamp.part_1", "raw_timestamp_part_2", "user_name", "cvtd_timestamp", "new_window", "num_window")
test.data2 <- test.data[, !(names(test.data) %in% test.delete)]
set.seed(2345)
inTrain <- createDataPartition(y=train.data2$classe, p= 0.70, list=FALSE)
train.data3 <- train.data2[inTrain, ]
test.data3 <- train.data2[-inTrain, ]
dim(train.data3)
dim(test.data3)
modelRf <- train(classe ~ ., data=train.data3, method="rf", trControl=trainControl(method = "cv", number = 5)
modelRf
modelRf <- train(classe ~ ., data=train.data3, method="rf", trControl=trainControl(method = "cv", number = 5)
modelRf
modelRf <- train(classe ~ ., data=train.data3, method="rf", trControl=trainControl(method = "cv", number = 5)
modelRf
library(devtools)
install_github("ramnathv/rCharts@dev")
library(devtools)
install.packages("devtools")
install_github("ramnathv/rCharts@dev")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install(rCharts)
install.packages("rCharts")
install.packages("rCharts")
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
ui.R
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!")
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId = "text1", label = "Input Text1"),
textInput(inputID = "text2", label = "Input Text2")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOuput('text3'),
p('Outside text'),
textOutput('text4'),
p('Inside text, but non-reactive'),
textOutput('text5')
)
install.packages("shiny")
library(shiny)
install.packages("shiny")
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId = "text1", label = "Input Text1"),
textInput(inputID = "text2", label = "Input Text2")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOuput('text3'),
p('Outside text'),
textOutput('text4'),
p('Inside text, but non-reactive'),
textOutput('text5')
)
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId = "text1", label = "Input Text1"),
textInput(inputID = "text2", label = "Input Text2"),
actionButton("goButton", "Submit")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOuput('text3'),
)
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId = "text1", label = "Input Text1"),
textInput(inputID = "text2", label = "Input Text2"),
actionButton("goButton", "Submit")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOuput('text3'),
)
))
install.packages("shinyUI")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId = "text1", label = "Input Text1"),
textInput(inputID = "text2", label = "Input Text2"),
actionButton("goButton", "Submit")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOuput('text3'),
)
))
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId = "text1", label = "Input Text1"),
textInput(inputId = "text2", label = "Input Text2"),
actionButton("goButton", "Submit")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOuput('text3'),
)
))
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId = "text1", label = "Input Text1"),
textInput(inputId = "text2", label = "Input Text2"),
actionButton("goButton", "Submit")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOutput('text3'),
)
))
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId = "text1", label = "Input Text1"),
textInput(inputId = "text2", label = "Input Text2"),
actionButton("goButton", "Submit")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOutput('text3')
)
))
manipulate
install.rCharts
library(rCharts)
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(shiny)
shinyServer(
library(shiny)
shiny(Server(
function(input, output) {
}
)
runApp
> library(shiny)
> runExample("01_hello")
library(shiny)
# Define UI for application that plots random distributions
shinyUI(pageWithSidebar(
# Application title
headerPanel("Hello Shiny!"),
# Sidebar with a slider input for number of observations
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 1,
max = 1000,
value = 500)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
))
install.packages("shiny")
install.packages("shiny")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId = "text1", label = "Input Text1"),
textInput(inputId = "text2", label = "Input Text2"),
actionButton("goButton", "Submit")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOutput('text3')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId = "text1", label = "Input Text1"),
textInput(inputId = "text2", label = "Input Text2"),
actionButton("goButton", "Submit")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOutput('text3')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId = "text1", label = "Input Text1"),
textInput(inputId = "text2", label = "Input Text2"),
actionButton("goButton", "Submit")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOutput('text3')
)
))
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
setwd("~/Desktop/DDPAssignment")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId = "text1", label = "Input Text1"),
textInput(inputId = "text2", label = "Input Text2"),
actionButton("goButton", "Submit")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOutput('text3')
)
))
install.packages("shiny")
install.packages("shiny")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
library("shiny")
runApp("DDPAssignment")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId = "text1", label = "Input Text1"),
textInput(inputId = "text2", label = "Input Text2"),
actionButton("goButton", "Submit")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOutput('text3')
)
))
